{"version":3,"sources":["redux/reducers/rootReducer.ts","shared/mols/banner/banner.tsx","shared/mols/content/content.tsx","shared/mols/searchbar/searchbar.tsx","shared/organism/card/card.tsx","App.tsx","redux/configureStore.ts","serviceWorker.ts","index.tsx"],"names":["GET_FILM","LIST_FILMS","FETCHING_FILMS","FAIL_FILMS","initialState","films","isFetching","hasErrors","reducer","state","arguments","length","undefined","action","type","console","log","payload","Banner","react_default","a","createElement","className","src","Component","Content","this","props","listFilms","rootReducer","map","film","index","episode_id","title","opening_crawl","id","director","producer","release_date","mapDispatchToProps","dispatch","fetch","method","then","res","json","results","catch","error","reduxConnetion","ReactRedux","Searchbar","onChange","e","_this","setState","target","value","onClick","getFilm","placeholder","reduxConnection","Card","banner_banner","searchbar_searchbar","content_content","store","Redux","ReduxDevtools","thunk","App","react_redux_es","card_card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d7e3adf8.chunk.js","sourcesContent":["const GET_FILM = 'GET_FILM';\r\nconst LIST_FILMS = 'LIST_FILMS';\r\nconst FETCHING_FILMS = 'FETCHING_FILMS';\r\nconst FAIL_FILMS = 'FAIL_FILMS';\r\n\r\ninterface IState {\r\n  films: any[];\r\n  isFetching: boolean;\r\n  hasErrors: boolean;\r\n}\r\n\r\ninterface IAction {\r\n  type: string;\r\n  payload: any;\r\n}\r\n\r\nconst initialState: IState = {\r\n  films: [],\r\n  isFetching: false,\r\n  hasErrors: false,\r\n}\r\n\r\nexport default function reducer(state: IState = initialState, action: IAction) {\r\n  switch(action.type) {\r\n    case FETCHING_FILMS:\r\n      return {\r\n        films: state.films,\r\n        isFetching: true,\r\n        hasErrors: state.hasErrors,\r\n      };\r\n\r\n    case LIST_FILMS:\r\n      console.log(action.payload);\r\n      return {\r\n        films: action.payload,\r\n        isFetching: false,\r\n        hasErrors: false,\r\n      };\r\n\r\n    case GET_FILM:\r\n      console.log(action.payload);\r\n      return {\r\n        films: action.payload,\r\n        isFetching: false,\r\n        hasErrors: false,\r\n      };\r\n\r\n    case FAIL_FILMS:\r\n      return {\r\n        films: state.films,\r\n        isFetching: false,\r\n        hasErrors: action.payload,\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const listFilms = () => {\r\n  return (dispatch: any) => {\r\n    dispatch({type: FETCHING_FILMS, payload: null })\r\n\r\n    fetch('https://swapi.co/api/films', {method: 'GET'})\r\n      .then(res => res.json())\r\n      .then(films => {\r\n        dispatch({type: LIST_FILMS, payload: films.results });\r\n      })\r\n      .catch(error => {\r\n        return dispatch({\r\n          type: FAIL_FILMS,\r\n          payload: error\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport const getFilm = (film: string) => {\r\n  return (dispatch: any) => {\r\n    dispatch({type: FETCHING_FILMS, payload: null })\r\n\r\n    fetch('https://swapi.co/api/films/?search=' + film, {method: 'GET'})\r\n      .then(res => res.json())\r\n      .then(film => {\r\n        dispatch({type: GET_FILM, payload: film.results });\r\n      })\r\n      .catch(error => {\r\n        return dispatch({\r\n          type: FAIL_FILMS,\r\n          payload: error\r\n        });\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./banner.css\";\r\n\r\nclass Banner extends Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n        <img\r\n          className=\"banner-img\"\r\n          src=\"https://logos-download.com/wp-content/uploads/2016/09/Star_Wars_logo-1.png\"\r\n        />\r\n        <h1 className=\"banner-title\">MAY THE FORCE BE WITH YOU!</h1>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Banner;\r\n","import React, { Component } from \"react\";\r\nimport * as ReactRedux from \"react-redux\";\r\n\r\nimport { listFilms } from \"../../../redux/reducers/rootReducer\";\r\n\r\nimport \"./content.css\";\r\n\r\ninterface IState {\r\n  films: any[];\r\n}\r\n\r\ninterface IProps {\r\n  rootReducer: {\r\n    films: any[];\r\n    isFetching: boolean;\r\n    hasErrors: boolean;\r\n  };\r\n  listFilms: () => void;\r\n}\r\n\r\nclass Content extends Component<IProps, IState> {\r\n  state: IState = {\r\n    films: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.listFilms();\r\n    console.log(this.props.rootReducer.films);\r\n  }\r\n\r\n  render() {\r\n    if (this.props.rootReducer.isFetching) return \"LOADING...\";\r\n    if (this.props.rootReducer.hasErrors)\r\n      return \"SOMETHING WENT WRONG, TRY AGAIN LATER... ;(\";\r\n    if (this.props.rootReducer.films.length < 1)\r\n      return \"SEEMS THAT THERE ISN'T ANY STAR WARS MOVIE WITH THIS NAME, TRY AGAIN! :D\";\r\n    return (\r\n      <div className=\"content\">\r\n        {this.props.rootReducer.films.map((film, index) => {\r\n          return (\r\n            <div>\r\n              <h2>\r\n                Episode: {film.episode_id} - {film.title}\r\n              </h2>\r\n              <p>{film.opening_crawl}</p>\r\n              <p id=\"sub\">\r\n                {film.director} - {film.producer} - {film.release_date}\r\n              </p>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  rootReducer: state\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  listFilms\r\n};\r\n\r\nconst reduxConnetion = ReactRedux.connect(mapStateToProps, mapDispatchToProps);\r\n\r\nexport default reduxConnetion(Content);\r\n","import React, { Component } from \"react\";\r\nimport * as ReactRedux from \"react-redux\";\r\n\r\nimport { getFilm } from \"../../../redux/reducers/rootReducer\";\r\n\r\nimport \"./searchbar.css\";\r\n\r\ninterface IProps {\r\n  getFilm: (film: any) => void;\r\n}\r\n\r\ninterface IState {\r\n  film: string;\r\n}\r\n\r\nclass Searchbar extends Component<IProps, IState> {\r\n  state = {\r\n    film: \"\"\r\n  };\r\n\r\n  onChange = (e: any) => this.setState({ film: e.target.value });\r\n\r\n  onClick = (e: any) => this.props.getFilm(this.state.film);\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          className=\"searchbar\"\r\n          type=\"text\"\r\n          placeholder=\"Search for Star Wars movies!\"\r\n          onChange={this.onChange}\r\n        />\r\n        <button className=\"searchbutton\" onClick={this.onClick}>\r\n          Search\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => ({\r\n  film: state.film\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getFilm\r\n};\r\n\r\nconst reduxConnection = ReactRedux.connect(mapStateToProps, mapDispatchToProps);\r\n\r\nexport default reduxConnection(Searchbar);\r\n","import React, { Component } from \"react\";\r\n\r\nimport Banner from \"../../mols/banner/banner\";\r\nimport Content from \"../../mols/content/content\";\r\nimport Searchbar from \"../../mols/searchbar/searchbar\";\r\n\r\nimport \"./card.css\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <Banner />\r\n        <Searchbar />\r\n        <Content />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport configureStore from \"./redux/configureStore\";\r\nimport * as ReactRedux from \"react-redux\";\r\n\r\nimport Card from \"./shared/organism/card/card\";\r\n\r\nconst store = configureStore();\r\n\r\nimport \"./App.css\";\r\n\r\ninterface IProps {}\r\n\r\ninterface IState {}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <ReactRedux.Provider store={store}>\r\n        <div className=\"App\">\r\n          <Card />\r\n        </div>\r\n      </ReactRedux.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import * as Redux from 'redux';\r\nimport * as ReduxDevtools from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nexport default function configureStore() {\r\n  return Redux.createStore(rootReducer, ReduxDevtools.composeWithDevTools(Redux.applyMiddleware(thunk)));\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}